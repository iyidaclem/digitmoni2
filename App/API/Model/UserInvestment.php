<?php
namespace API\Model;
use database\DataBase;
use core\Model;
use database\DB;
use DateTime;
use core\Helper\Help;
use PDO;
/**
 * This class is a model and extension of main model that is meant to handle
 * handle everything about querying the database about user investment. Think 
 * of it as the model for the table "user_investment". 
 * 
 * @param string $table is the parameter every instance of this model class will 
 * take. In this case it is the "user_investment" table.
 */
class UserInvestment extends Model{
  private $model, $readDB, $writeDB, $help;
  public function __construct($table){
    parent::__construct($table);
    $this->model = new Model('user_investment');
    $this->readDB = DB::connectReadDB();
    $this->writeDB = DB::connectWriteDB();
    $this->help = new Help();
  }

  /**
   * This method is meant to retrieve the rules about a particular user investment.
   * The key interest is maturity date, interest rate, amount invested. Some other part of 
   * the application uses this data to calculate user interest or cancellation cost.
   * 
   * @param string $user this is the username of the user whose particular investment rules we want 
   * to retreive. 
   * 
   * @param int $ID is the particular investment id as generated by database.
   * 
   * @return 
   */
  public function getUserInvestmentPackageRule($user, $ID){
    $userSingleInvestment = $this->model->findFirst([
      'conditions' => 'username = ? AND id = ? AND state = ?',
      'bind' => [$user, $ID, 'active']
    ]);

    if(!$userSingleInvestment) return false;

    return $userSingleInvestment;
  }
  
  /**
   * This method when called gets all the investment package by a particular user 
   * since one user can have more than one investment. It takes one parameter described 
   * below.
   * 
   * @param mixed $user this is the username of the user which is unique.
   * 
   * @return mixed The function returns false when there is no investment for the 
   * user. Example is when a user who dont have any running investment package tries 
   * to view is portfolio.
   * 
   * If user have any investment packages, It returns all detail about each of them. These
   * details will include:
   * id- investment id generated by DB
   * investmentID - id for that package generated by DB
   * username- Holder of the investment.
   * amount - the amount invested.
   * created_at - the date and time the investment was made.
   * matures_at - 
   * next_date - 30days from the previous date, when the investment
   * will be due for compensation
   * inv_reference - unique identifier for the investment
   * state- enum(active/deactivated)
   * rollover- enum(yes/no)
   * status - enum(true/false)
   * duration- number of months the investment will last. Marked for deprecation
   * interest - interest rate
   * 
   */
  public function getAllUserInvestments($user){
    $allUserActiveInvestment = $this->model->find([
      'conditions' => 'username = ? AND state = ? AND status = ?',
      'bind' => [$user, 'active', 'true']
    ]);

    if(!$allUserActiveInvestment) return false;

    return $allUserActiveInvestment;
  }
  
  /**
   * @param mixed $rollover
   * 
   * @return [type]
   */
  public function investmentsDueIn7Days($rollover){
    //declare the days date 
    $todayDate = date('Y-m-d');
    $aWeekDate = date('Y-m-d', strtotime("+7 days"));
    $query = $this->readDB->prepare("SELECT amount, interest FROM user_investments 
        WHERE rollover=:rollover AND DATE(matures_at) BETWEEN DATE(:startDate) and DATE(:endDate) ");
    $query->bindParam(':rollover', $rollover, PDO::PARAM_STR);
    $query->bindParam(':startDate', $todayDate, PDO::PARAM_STR);
    $query->bindParam(':endDate', $aWeekDate, PDO::PARAM_STR);
    $query->execute();

    $rowCount = $query->rowCount();
    if($rowCount === 0){
      return false;
    }
    $dueInvestmentRow = $query->fetchAll(PDO::FETCH_OBJ);
    return $dueInvestmentRow;
  }

  /**
   * This investment returns due investment for a given date. It will be used by or called by the laravery event runner
   * and the its output will be passed to to function that will map interest calculation function to it.
   * 
   * 
   * @param string $rollover - this will be "yes" or "no"
   * yes- to fetch due investments where rollover is applied - where compound interest will be applied
   * no - to fetch due investment where rollover is not applied. 
   * 
   * @return [type]
   */
  public function dueInvestment($rollover){
    $todayDate = date('Y-m-d');
    //$readDB = DB::connectReadDB();
    $query = $this->readDB->prepare("SELECT username,inv_reference, amount, interest from 
    user_investments where rollover=:rollover and matures_at =:today");
    $query->bindParam(':rollover', $rollover, PDO::PARAM_STR);
    $query->bindParam(':today', $todayDate, PDO::PARAM_STR);
    $query->execute();
    $rowCount = $query->rowCount();
    if($rowCount===0) return false;
    $dueInvestmentDetail = $query->fetchAll(PDO::FETCH_OBJ);

    return $dueInvestmentDetail;
  }




}